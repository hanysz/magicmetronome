package net.hanysz.MM.parser;

/* the java source code generated by javacc
 * from the file mmparser.jj
 * doesn't contain a package declaration;
 * therefore the file "package_declaration.txt"
 * is automatically prepended to all source files
 * by the makefile.
 */

/* Generated By:JavaCC: Do not edit this line. MMScriptParser.java */
    import net.hanysz.MM.events.*;
    import java.util.*;
    public class MMScriptParser implements net.hanysz.MM.MMConstants, MMScriptParserConstants {


        private static boolean insideAccelBlock = false;
                // needed to detect infinite loops inside accel blocks...
        private static boolean gotVolume = false;
        private static float nextVolume;

  final public int Start(MMEventList eventList) throws ParseException {
 int length;
    length = script(eventList);
    jj_consume_token(0);
        //System.out.println(eventList);
        {if (true) return length;}
    throw new Error("Missing return statement in function");
  }

  final public int script(MMEventList eventList) throws ParseException {
    int length=0, sublength = 0;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOWER_CASE_LETTER:
      case RELATIVE_TEMPO:
      case REPEAT:
      case BLOCK_START:
      case PAUSE:
      case BRANCH_START:
      case ACCEL:
      case VOLUME:
      case END:
      case MARKER:
      case PUSH_TEMPO:
      case POP_TEMPO:
      case SHORT_PAUSE:
      case MEDIUM_PAUSE:
      case REAL_NUMBER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATIVE_TEMPO:
      case POP_TEMPO:
      case REAL_NUMBER:
        tempo(eventList);
        break;
      case ACCEL:
        sublength = accelBlock(eventList);
         length+=sublength;
        break;
      case REPEAT:
      case BLOCK_START:
        sublength = repeatBlock(eventList);
         length+=sublength;
        break;
      case BRANCH_START:
        branch(eventList);
        break;
      case LOWER_CASE_LETTER:
      case PAUSE:
      case VOLUME:
      case END:
      case MARKER:
      case PUSH_TEMPO:
      case SHORT_PAUSE:
      case MEDIUM_PAUSE:
        sublength = nonTempoEvent(eventList);
         length+=sublength;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return length;}
    throw new Error("Missing return statement in function");
  }

  final public void tempo(MMEventList eventList) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL_NUMBER:
      absoluteTempo(eventList);
      break;
    case RELATIVE_TEMPO:
      relativeTempo(eventList);
      break;
    case POP_TEMPO:
      popTempo(eventList);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void absoluteTempo(MMEventList eventList) throws ParseException {
    float tempo;
    tempo = realNumber();
            if (tempo>0) {
                eventList.add(new AbsoluteTempoEvent(tempo));
            } else {
                {if (true) throw new ParseException("Trying to use zero or a negative number "
                +"as a tempo.");}
            }
  }

  final public void relativeTempo(MMEventList eventList) throws ParseException {
    float tempo;
    jj_consume_token(RELATIVE_TEMPO);
    tempo = realNumber();
            if (tempo>0) {
                eventList.add(new RelativeTempoEvent(tempo));
            } else {
                {if (true) throw new ParseException("Relative tempo change T was followed by "
                +"zero or a negative number.");}
            }
  }

  final public void popTempo(MMEventList eventList) throws ParseException {
    jj_consume_token(POP_TEMPO);
     eventList.add(new PopTempoEvent());
  }

  final public int accelBlock(MMEventList eventList) throws ParseException {
    insideAccelBlock = true;

    int length = 0;
    AccelStartEvent accelEvent = new AccelStartEvent();
    MMEvent accelStartTempo, accelEndTempo;
    jj_consume_token(ACCEL);
         eventList.add(accelEvent);
    jj_consume_token(BLOCK_START);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINEAR_ACCEL:
      jj_consume_token(LINEAR_ACCEL);
             accelEvent.setMode(LINEAR_ACCEL_MODE);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIVE_TEMPO:
    case REAL_NUMBER:
      accelStartTempo = getAccelTempo();
             accelEvent.setStartTempo(accelStartTempo);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    // the above produces a warning that I don't understand
            length = fixedTempoEventList(eventList);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIVE_TEMPO:
    case REAL_NUMBER:
      accelEndTempo = getAccelTempo();
             accelEvent.setEndTempo(accelEndTempo);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    endAccel(eventList);
        insideAccelBlock = false; // nb this will fail if the syntax ever changes
        // to allow nested accel blocks!
        accelEvent.setLength(length);
        {if (true) return length;}
    throw new Error("Missing return statement in function");
  }

  final public MMEvent getAccelTempo() throws ParseException {
    float tempo;
    int tempoType=ABSOLUTE_TEMPO_EVENT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIVE_TEMPO:
      jj_consume_token(RELATIVE_TEMPO);
         tempoType=RELATIVE_TEMPO_EVENT;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    tempo = realNumber();
     {if (true) return ((tempoType==ABSOLUTE_TEMPO_EVENT) ?
                new AbsoluteTempoEvent(tempo) :
                new RelativeTempoEvent(tempo));}
    throw new Error("Missing return statement in function");
  }

  final public void endAccel(MMEventList eventList) throws ParseException {
    jj_consume_token(BLOCK_END);
     eventList.add(new AccelEndEvent());
  }

  final public int fixedTempoEventList(MMEventList eventList) throws ParseException {
 int length=0, sublength=0;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOWER_CASE_LETTER:
      case REPEAT:
      case BLOCK_START:
      case PAUSE:
      case VOLUME:
      case END:
      case MARKER:
      case PUSH_TEMPO:
      case SHORT_PAUSE:
      case MEDIUM_PAUSE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      sublength = nonTempoEvent(eventList);
             length+=sublength;
    }
     {if (true) return length;}
    throw new Error("Missing return statement in function");
  }

  final public int repeatBlock(MMEventList eventList) throws ParseException {
 int length=0, numberOfRepeats;
    numberOfRepeats = repeatCount(eventList);
    // adds RepeatStartEvent
            // <BLOCK_START> is inside repeatCount
            length = script(eventList);
    jj_consume_token(BLOCK_END);
        if ((numberOfRepeats == INFINITE_REPEAT) && (length==0)) {
            {if (true) throw new ParseException("Trying to repeat an empty block "
            +"an infinite number of times.");}
        }
        eventList.add(new RepeatEndEvent());
        {if (true) return length*numberOfRepeats;}
    throw new Error("Missing return statement in function");
  }

  final public int repeatCount(MMEventList eventList) throws ParseException {
 int numRepeats=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPEAT:
      numRepeats = finiteRepeatCount(eventList);
         {if (true) return numRepeats;}
      break;
    case BLOCK_START:
      infiniteRepeatCount(eventList);
         {if (true) return 0;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int finiteRepeatCount(MMEventList eventList) throws ParseException {
    int numberOfRepeats = INFINITE_REPEAT;
    jj_consume_token(REPEAT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL_NUMBER:
      numberOfRepeats = positiveInteger();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(BLOCK_START);
        eventList.add(new RepeatStartEvent(numberOfRepeats));
        {if (true) return numberOfRepeats;}
    throw new Error("Missing return statement in function");
  }

  final public void infiniteRepeatCount(MMEventList eventList) throws ParseException {
    int numberOfRepeats = INFINITE_REPEAT;
    jj_consume_token(BLOCK_START);
        if (insideAccelBlock) {
            {if (true) throw new ParseException("Infinite loop inside accelerando block.");}
        }
        eventList.add(new RepeatStartEvent(INFINITE_REPEAT));
  }

  final public void branch(MMEventList eventList) throws ParseException {
    MMEventList branchEventList = new MMEventList();
    jj_consume_token(BRANCH_START);
    script(branchEventList);
    jj_consume_token(BRANCH_END);
     eventList.add(new BranchEvent(branchEventList));
  }

  final public int nonTempoEvent(MMEventList eventList) throws ParseException {
 int length=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOWER_CASE_LETTER:
      sound(eventList);
             length = 1;
      break;
    case PAUSE:
    case SHORT_PAUSE:
    case MEDIUM_PAUSE:
      length = pause(eventList);
      break;
    case VOLUME:
      volume(eventList);
      break;
    case MARKER:
      marker(eventList);
      break;
    case PUSH_TEMPO:
      pushTempo(eventList);
      break;
    case END:
      end(eventList);
      break;
    case REPEAT:
    case BLOCK_START:
      length = fixedTempoRepeatBlock(eventList);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return length;}
    throw new Error("Missing return statement in function");
  }

  final public void sound(MMEventList eventList) throws ParseException {
    Token t;
    char firstChar;
    int value;
    t = jj_consume_token(LOWER_CASE_LETTER);
             firstChar = t.image.charAt(0);
             value = (int)firstChar - (int)'a';
             eventList.add(new SoundEvent(value));
  }

  final public int pause(MMEventList eventList) throws ParseException {
 int length;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHORT_PAUSE:
      shortPause(eventList);
         length=1;
      break;
    case MEDIUM_PAUSE:
      mediumPause(eventList);
         length=2;
      break;
    case PAUSE:
      length = longPause(eventList);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return length;}
    throw new Error("Missing return statement in function");
  }

  final public void volume(MMEventList eventList) throws ParseException {
 float theVolume;
    jj_consume_token(VOLUME);
    theVolume = realNumber();
     eventList.add(new VolumeEvent(theVolume));
  }

  final public void shortPause(MMEventList eventList) throws ParseException {
    jj_consume_token(SHORT_PAUSE);
     eventList.add(new SoundEvent(SILENT_SOUND));
  }

  final public void mediumPause(MMEventList eventList) throws ParseException {
    jj_consume_token(MEDIUM_PAUSE);
        eventList.add(new SoundEvent(SILENT_SOUND));
        eventList.add(new SoundEvent(SILENT_SOUND));
  }

  final public int longPause(MMEventList eventList) throws ParseException {
    int numberOfTicks;
    jj_consume_token(PAUSE);
    numberOfTicks = positiveInteger();
        for (int i = 0; i < numberOfTicks; i++) {
            eventList.add(new SoundEvent(SILENT_SOUND));
        }
        {if (true) return numberOfTicks;}
    throw new Error("Missing return statement in function");
  }

  final public void marker(MMEventList eventList) throws ParseException {
    Token t;
    String markerName;
    int startOfName, endOfName;
    jj_consume_token(MARKER);
    t = jj_consume_token(MARKERNAME);
        startOfName = t.image.indexOf('"')+1;
        endOfName = t.image.lastIndexOf('"');
        markerName = t.image.substring(startOfName, endOfName);
        eventList.add(new MarkerEvent(markerName));
  }

  final public void pushTempo(MMEventList eventList) throws ParseException {
    jj_consume_token(PUSH_TEMPO);
     eventList.add(new PushTempoEvent());
  }

  final public void end(MMEventList eventList) throws ParseException {
    jj_consume_token(END);
     eventList.add(new EndOfTrackEvent());
  }

  final public int fixedTempoRepeatBlock(MMEventList eventList) throws ParseException {
 int length=0, sublength=0, numRepeats;
    numRepeats = repeatCount(eventList);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOWER_CASE_LETTER:
      case REPEAT:
      case BLOCK_START:
      case PAUSE:
      case VOLUME:
      case END:
      case MARKER:
      case PUSH_TEMPO:
      case SHORT_PAUSE:
      case MEDIUM_PAUSE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      sublength = nonTempoEvent(eventList);
             length+=sublength;
    }
    jj_consume_token(BLOCK_END);
        eventList.add(new RepeatEndEvent());
        {if (true) return length*numRepeats;}
    throw new Error("Missing return statement in function");
  }

  final public float factor() throws ParseException, NumberFormatException {
    Token t;
    float answer, factor;
    t = jj_consume_token(REAL_NUMBER);
      answer= Float.parseFloat(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES_SIGN:
      jj_consume_token(TIMES_SIGN);
      factor = realNumber();
          answer *= factor;
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIVIDE_SIGN:
      jj_consume_token(DIVIDE_SIGN);
      factor = realNumber();
          if (factor!=0) { answer /= factor;}
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
      {if (true) return answer;}
    throw new Error("Missing return statement in function");
  }

  final public float realNumber() throws ParseException, NumberFormatException {
    float total, nextFactor;
    total = factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
      jj_consume_token(PLUS_SIGN);
      nextFactor = realNumber();
          total += nextFactor;
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS_SIGN:
      jj_consume_token(MINUS_SIGN);
      nextFactor = realNumber();
          total -= nextFactor;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
      {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public int positiveInteger() throws ParseException, NumberFormatException {
    Token t;
    Float somenumber;
    int answer;
    somenumber = realNumber();
        answer = Math.round(somenumber);
        if (answer>0) {
            {if (true) return answer;}
        } else {
            {if (true) throw new ParseException("Got zero or a negative number "
            +"where a positive number was expected.");}
        }
    throw new Error("Missing return statement in function");
  }

  final public void parsingError(String message) throws ParseException {
 System.out.println("Parsing error: "+message); System.exit(1);
  }

  public MMScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xe056de00,0xe056de00,0x40000400,0x200000,0x400,0x400,0x400,0xa0545a00,0x1800,0x0,0xa0545a00,0x80004000,0xa0545a00,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x21,0x21,0x20,0x0,0x20,0x20,0x0,0x1,0x0,0x20,0x1,0x1,0x1,0x8,0x10,0x2,0x4,};
   }

  public MMScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public MMScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MMScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public MMScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MMScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public MMScriptParser(MMScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(MMScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[39];
    for (int i = 0; i < 39; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

    }
