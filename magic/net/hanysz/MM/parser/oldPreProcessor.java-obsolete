package net.hanysz.MM.parser;

/* Magic Metronome parser, first and trivial version */
// updated 26th January 2007, still lots to do...

options {
    STATIC = false;
}


PARSER_BEGIN(MMScriptParser)
    import net.hanysz.MM.events.*;
    import java.util.*;
    public class MMScriptParser implements net.hanysz.MM.MMConstants {


	private static boolean insideAccelBlock = false;
		// needed to detect infinite loops inside accel blocks...
	private static boolean gotVolume = false;
	private static float nextVolume;

	// naughty use of global variables
	// so that preprocessor and dependent methods
	// can easily share data
	private static int charPosition;
	private static char currentChar;
	private static int commentStart, commentEnd;
	private static int macroStart, macroEnd;
	private static StringBuilder thisMacroName;
	private static  Map<String,String> macroTable
				= new HashMap<String,String>();


	public static void preProcess(StringBuilder theScript) {
	    // remove comments and expand macro definitions

	    StringBuilder macroDef;
	    String macroValue;

	    removeComments(theScript);

	    while ((macroStart=theScript.indexOf("\\"))!=-1) {
		charPosition = macroStart+1;
		thisMacroName = getMacroName(theScript);
		skipWhiteSpace(theScript);

		if (currentChar == '=') { // got a macro definition
		    macroDef = getMacroDefinition(theScript);
		    macroTable.put(thisMacroName.toString(), macroDef.toString());
		    theScript.delete(macroStart, macroEnd);
		} else { //otherwise replace the text
		    macroValue = macroTable.get(thisMacroName.toString());
		    if (macroValue == null) {
			error("macro "+thisMacroName+" is used before it is defined.");
		    } else {
			theScript.replace(macroStart, macroEnd, macroValue);
		    }
		} // end replace text
	    } //end while macros
	} // end preprocess


	private static void removeComments(StringBuilder theScript) {
	    while ((commentStart=theScript.indexOf("#"))!=-1) {
		commentEnd = theScript.indexOf("\n",commentStart);
		if (commentEnd==-1) {commentEnd = theScript.length();}
		theScript.delete(commentStart,commentEnd);
	    }
	}


	private static StringBuilder getMacroName(StringBuilder theScript) {
	    StringBuilder name = new StringBuilder();

	    currentChar = theScript.charAt(charPosition);
	    while (Character.isLetter(currentChar)
		    || Character.isDigit(currentChar)
		    || currentChar == '-'
		    || currentChar == '_') {
		name.append(currentChar);
		charPosition++;
		currentChar = (charPosition < theScript.length() ?
			    theScript.charAt(charPosition) : '#');
	    }
	    macroEnd = charPosition;
	    return name;
	} // end getMacroName


	private static void skipWhiteSpace(StringBuilder theScript) {
	    while (Character.isWhitespace(currentChar)) {
		charPosition++;
		currentChar = (charPosition < theScript.length() ?
			    theScript.charAt(charPosition) : '#');
	    }
	}


	private static StringBuilder getMacroDefinition(StringBuilder theScript) {
	    StringBuilder theDefinition = new StringBuilder();

	    charPosition++;  // move past the = sign
	    currentChar = (charPosition < theScript.length() ?
			theScript.charAt(charPosition) : '#');

	    skipWhiteSpace(theScript);
	    if (currentChar != '"') {
		error("macro definition for " + thisMacroName
			+ " should begin with \", got "+currentChar);
	    }
	    do {
		charPosition++;
		currentChar = theScript.charAt(charPosition);
		if (currentChar == '#') {
		    error("macro definition for" + thisMacroName
			+ "should end with \"");
		}
		theDefinition.append(currentChar);
	    }
	    while (currentChar != '"'); // end do-while

	    //now the definition will end with the closing " -- delete it
	    theDefinition.deleteCharAt(theDefinition.length()-1);

	    charPosition++;
	    macroEnd = charPosition;
	    return theDefinition;
	}


	public static void postProcess(MMEventList eventList) {
	    // put accelerandi into correct form;
	    // check for empty infinite repeats
	}


	public static void error(String message) {
	    System.out.println("Parsing error: "+message);
	    System.exit(1);
	}
    }
PARSER_END(MMScriptParser)


// SKIP : { < WHITESPACE : " " | "\n" | "\r" | "\r\n" | "\t" > }
SKIP : { " " | "\n" | "\r" | "\r\n" | "\t" }
TOKEN : { < LOWER_CASE_LETTER : ["a"-"z"] > }
TOKEN : { < RELATIVE_TEMPO : "T" > }
TOKEN : { < REPEAT : "R" > }
TOKEN : { < BLOCK_START : "(" > }
TOKEN : { < BLOCK_END : ")" > }
TOKEN : { < PAUSE : "S" > }
TOKEN : { < BRANCH_START : "{" > }
TOKEN : { < BRANCH_END : "}" > }
TOKEN : { < ACCEL : "A" > }
TOKEN : { < VOLUME : "V" > }
TOKEN : { < PAN : "P" > }
TOKEN : { < END : "E" > }
TOKEN : { < LINEAR_ACCEL : "L" > }
// TOKEN : { < MARKER : "M" (<WHITESPACE>)* "\"" (<LOWER_CASE_LETTER>)* "\"" > }

TOKEN : { < MARKER : "M" > : WithinMarker }
<WithinMarker> TOKEN :
	{ <MARKERNAME : "\"" (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "-" | "_" )+ "\"" > :
	    DEFAULT }
<WithinMarker> SKIP : { " " | "\n" | "\r" | "\r\n" | "\t" }

TOKEN : { < PUSH_TEMPO : "[" > }
TOKEN : { < POP_TEMPO : "]" > }
TOKEN : { < SHORT_PAUSE : "," > }
TOKEN : { < MEDIUM_PAUSE : ";" > }
TOKEN : { < PLUS_SIGN : "+" > }
TOKEN : { < MINUS_SIGN : "-" > }
TOKEN : { < TIMES_SIGN : "*" > }
TOKEN : { < DIVIDE_SIGN : "/" > }
TOKEN : { < REAL_NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> > }
//TOKEN : { < WHOLE_NUMBER : <DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }


int Start(MMEventList eventList) :
{int length;}
{
    length = script(eventList)
    <EOF>
    {
	//System.out.println(eventList);
	return length;
    }
}


int script(MMEventList eventList) :
{
    int length=0, sublength = 0;}
{
    (
	tempo(eventList)
    |
	sublength = accelBlock(eventList)
	{length+=sublength;}
    |
	sublength = repeatBlock(eventList) // weird javacc warning?
	{length+=sublength;}
    |
	branch(eventList)
    |
	sublength = nonTempoEvent(eventList)
	{length+=sublength;}
    )*
    {return length;}
}


void tempo(MMEventList eventList) :
{}
{
    (
	absoluteTempo(eventList)
    |
	relativeTempo(eventList)
    |
	popTempo(eventList)
    )
}


void absoluteTempo(MMEventList eventList) :
{
    float tempo;
}
{
    (
	tempo = realNumber()
	{
	    eventList.add(new AbsoluteTempoEvent(tempo));
	}
    )
}


void relativeTempo(MMEventList eventList) :
{
    float tempo;
}
{
    (
	<RELATIVE_TEMPO>
	tempo = realNumber()
	{
	    eventList.add(new RelativeTempoEvent(tempo));
	}
    )
}


void popTempo(MMEventList eventList) :
{}
{
    (
	<POP_TEMPO>
    )
    {eventList.add(new PopTempoEvent());}
}


int accelBlock(MMEventList eventList) :
{
    insideAccelBlock = true;

    int length = 0;
    AccelStartEvent accelEvent = new AccelStartEvent();
    MMEvent accelStartTempo, accelEndTempo;
}
{
    (
	<ACCEL>
	{eventList.add(accelEvent);}
	<BLOCK_START>
	(
	    <LINEAR_ACCEL>
	    {accelEvent.setMode(LINEAR_ACCEL_MODE);}
	)?
	(
	    accelStartTempo = getAccelTempo()
	    {accelEvent.setStartTempo(accelStartTempo);}
	)?
		// the above produces a warning that I don't understand
	length = fixedTempoEventList(eventList)
	(
	    accelEndTempo = getAccelTempo()
	    {accelEvent.setEndTempo(accelEndTempo);}
	)?
	endAccel(eventList)
    )
    {
	insideAccelBlock = false; // nb this will fail if the syntax ever changes
	// to allow nested accel blocks!
	accelEvent.setLength(length);
	return length;
    }
}


MMEvent getAccelTempo() :
{
    float tempo;
    int tempoType=ABSOLUTE_TEMPO_EVENT;
}
{
    (
	<RELATIVE_TEMPO>
	{tempoType=RELATIVE_TEMPO_EVENT;}
    )?
    tempo = realNumber()
    {return ((tempoType==ABSOLUTE_TEMPO_EVENT) ?
		new AbsoluteTempoEvent(tempo) :
		new RelativeTempoEvent(tempo));}
}



void endAccel(MMEventList eventList) :
{}
{
    (
	<BLOCK_END>
    )
    {eventList.add(new AccelEndEvent());}
}


int fixedTempoEventList(MMEventList eventList) :
{int length=0, sublength=0;}
{
    (
    	(
	    sublength = nonTempoEvent(eventList)
	    {length+=sublength;}
	)*
    )
    {return length;}
}


int repeatBlock(MMEventList eventList) :
{int length=0, numberOfRepeats;}
{
    (
	numberOfRepeats = repeatCount(eventList) // adds RepeatStartEvent
	// <BLOCK_START> is inside repeatCount
	length = script(eventList)
	<BLOCK_END>
    )
    {
	if ((numberOfRepeats == INFINITE_REPEAT) && (length==0)) {
	    parsingError("empty infinite loop.");
	}
	eventList.add(new RepeatEndEvent());
	return length*numberOfRepeats;
    }
}


int repeatCount(MMEventList eventList) :
{int numRepeats=0;}
{
    (
	numRepeats = finiteRepeatCount(eventList)
	{return numRepeats;}
    |
	infiniteRepeatCount(eventList)
	{return 0;}
    )
}


int finiteRepeatCount(MMEventList eventList) :
{
    int numberOfRepeats = INFINITE_REPEAT;
}
{
    (
	<REPEAT>
	(numberOfRepeats = positiveInteger())?
	<BLOCK_START>
    )
    {
	eventList.add(new RepeatStartEvent(numberOfRepeats));
	return numberOfRepeats;
    }
}


void infiniteRepeatCount(MMEventList eventList) :
{
    int numberOfRepeats = INFINITE_REPEAT;
}
{
    (
	<BLOCK_START>
    )
    {
	if (insideAccelBlock) {
	    parsingError("infinite loop inside accelerando block.");
	}
	eventList.add(new RepeatStartEvent(INFINITE_REPEAT));
    }
}


void branch(MMEventList eventList) :
{
    MMEventList branchEventList = new MMEventList();
}
{
    (
	<BRANCH_START>
	script(branchEventList)
	<BRANCH_END>
    )
    {eventList.add(new BranchEvent(branchEventList));}
}


int nonTempoEvent(MMEventList eventList) :
{int length=0;}
{
    (
	sound(eventList)
	    {length = 1;}
    |
	length = pause(eventList)
    |
	volume(eventList)
    |
	marker(eventList)
    |
	pushTempo(eventList)
    |
	end(eventList)
    |
	length = fixedTempoRepeatBlock(eventList)
    )
    {return length;}
}


void sound(MMEventList eventList) :
{
    Token t;
    char firstChar;
    int value;
}
{
    (
	t = <LOWER_CASE_LETTER>
	{
	     firstChar = t.image.charAt(0);
	     value = (int)firstChar - (int)'a';
	     eventList.add(new SoundEvent(value));
	}
    )
}


int pause(MMEventList eventList) :
{int length;}
{
    (
	shortPause(eventList)
	{length=1;}
    |
	mediumPause(eventList)
	{length=2;}
    |
	length=longPause(eventList)
    )
    {return length;}
}


void volume(MMEventList eventList) :
{float theVolume;}
{
    (
	<VOLUME>
	theVolume = realNumber()
    )
    {eventList.add(new VolumeEvent(theVolume));}
}


void shortPause(MMEventList eventList) :
{}
{
    <SHORT_PAUSE>
    {eventList.add(new SoundEvent(SILENT_SOUND));}
}


void mediumPause(MMEventList eventList) :
{}
{
    <MEDIUM_PAUSE>
    {
    	eventList.add(new SoundEvent(SILENT_SOUND));
    	eventList.add(new SoundEvent(SILENT_SOUND));
    }
}


int longPause(MMEventList eventList) :
{
    int numberOfTicks;
}
{
    <PAUSE>
    numberOfTicks = positiveInteger()
    {
	for (int i = 0; i < numberOfTicks; i++) {
	    eventList.add(new SoundEvent(SILENT_SOUND));
	}
	return numberOfTicks;
    }
}


void marker(MMEventList eventList) :
{
    Token t;
    String markerName;
    int startOfName, endOfName;
}
{
    <MARKER>
    t = <MARKERNAME>
    {
	startOfName = t.image.indexOf('"')+1;
	endOfName = t.image.lastIndexOf('"');
	markerName = t.image.substring(startOfName, endOfName);
	eventList.add(new MarkerEvent(markerName));
    }
}


void pushTempo(MMEventList eventList) :
{}
{
    (
	<PUSH_TEMPO>
    )
    {eventList.add(new PushTempoEvent());}
}


void end(MMEventList eventList) :
{}
{
    (
	<END>
    )
    {eventList.add(new EndOfTrackEvent());}
}


int fixedTempoRepeatBlock(MMEventList eventList) :
{int length=0, sublength=0, numRepeats;}
{
    (
	numRepeats = repeatCount(eventList) // adds RepeatStartEvent
	// <BLOCK_START>  -- included in repeatCount
	(
	    sublength = nonTempoEvent(eventList)
	    {length+=sublength;}
	)*
	<BLOCK_END>
    )
    {
	eventList.add(new RepeatEndEvent());
	return length*numRepeats;
    }
}


float realNumber() throws NumberFormatException :
{
    Token t;
}
{
    t = <REAL_NUMBER>
    {
	return Float.parseFloat(t.image);
    }
}


int positiveInteger() throws NumberFormatException :
{
    Token t;
}
{
    t = <REAL_NUMBER>
    {
	return (int)Float.parseFloat(t.image);
		// cheating rather badly, for the moment...
    }
}

void parsingError(String message) :
{}
{
{System.out.println("Parsing error: "+message); System.exit(1);}
}
